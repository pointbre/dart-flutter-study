import 'dart:convert';

// generated by bvd
import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

import 'serializers.dart';

part 'customer.g.dart';

// Please note that you need to run build task by pressing ctrl + p --> Tasks: Run Build Task.
// The build task will run built_value_generator to generate customer.g.dart and serializer.g.dart.

// generated by bvts
// Added --> import 'dart:convert';
// Added --> import 'serializers.dart';
// Changed :_$CcustomerSerializer --> _$customerSerializer
// Changed : static Customer fromJson(String jsonString) --> static Customer? fromJson(String jsonString) {
abstract class Customer implements Built<Customer, CustomerBuilder> {
  // The mandatory fields
  // It's possible to explicitly specify the property name
  @BuiltValueField(wireName: 'firstName')
  String get firstName;
  String get lastName;
  DateTime get registered;

  // The optional fields
  String? get gender;
  int? get age;
  Address? get address;
  BuiltList<PhoneNumber>? get phoneNumbers;

  Customer._();
  factory Customer([void Function(CustomerBuilder) updates]) = _$Customer;

  String toJson({int indentation = 2}) {
    return json.encode(serializers.serializeWith(Customer.serializer, this));
  }

  static Customer? fromJson(String jsonString) {
    return serializers.deserializeWith(
        Customer.serializer, json.decode(jsonString));
  }

  static Serializer<Customer> get serializer => _$customerSerializer;
}

abstract class Address implements Built<Address, AddressBuilder> {
  // Fields
  String get streetAddress;
  String get city;
  String get state;

  Address._();

  factory Address([void Function(AddressBuilder) updates]) = _$Address;

  String toJson() {
    return json.encode(serializers.serializeWith(Address.serializer, this));
  }

  static Address? fromJson(String jsonString) {
    return serializers.deserializeWith(
        Address.serializer, json.decode(jsonString));
  }

  static Serializer<Address> get serializer => _$addressSerializer;
}

abstract class PhoneNumber implements Built<PhoneNumber, PhoneNumberBuilder> {
  // Fields
  PhoneNumberType get type;
  String get number;

  PhoneNumber._();

  factory PhoneNumber([void Function(PhoneNumberBuilder) updates]) =
      _$PhoneNumber;

  String toJson() {
    return json.encode(serializers.serializeWith(PhoneNumber.serializer, this));
  }

  static PhoneNumber? fromJson(String jsonString) {
    return serializers.deserializeWith(
        PhoneNumber.serializer, json.decode(jsonString));
  }

  static Serializer<PhoneNumber> get serializer => _$phoneNumberSerializer;
}

// bves
// Changed: serializer => _$PhoneNumberTypeSerializer; --> serializer => _$phoneNumberTypeSerializer;
class PhoneNumberType extends EnumClass {
  static const PhoneNumberType home = _$home;
  static const PhoneNumberType mobile = _$mobile;
  static const PhoneNumberType office = _$office;

  const PhoneNumberType._(String name) : super(name);

  static BuiltSet<PhoneNumberType> get values => _$values;
  static PhoneNumberType valueOf(String name) => _$valueOf(name);
  static Serializer<PhoneNumberType> get serializer =>
      _$phoneNumberTypeSerializer;
}
